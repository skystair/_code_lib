<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\V2205фад╩_V.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\V2205фад╩_V.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Jun 29 09:29:25 2023
<BR><P>
<H3>Maximum Stack Usage =        108 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Bsp_Usart_Init &rArr; Bsp_Usart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[99]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">MemManage_Handler</a><BR>
 <LI><a href="#[13]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">UsageFault_Handler</a><BR>
 <LI><a href="#[15]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">SVC_Handler</a><BR>
 <LI><a href="#[16]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">DebugMon_Handler</a><BR>
 <LI><a href="#[17]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PendSV_Handler</a><BR>
 <LI><a href="#[18]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SysTick_Handler</a><BR>
 <LI><a href="#[2b]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[48]">ADC3_4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2e]">CAN1_RX1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2f]">CAN1_SCE_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[59]">CAN2_RX0_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5a]">CAN2_RX1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5b]">CAN2_SCE_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[58]">CAN2_TX_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6d]">COMP7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6b]">COMP_1_2_3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6c]">COMP_4_5_6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[24]">DMA1_Channel1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[25]">DMA1_Channel2_IRQHandler</a> from bsp_interrupt.o(i.DMA1_Channel2_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[26]">DMA1_Channel3_IRQHandler</a> from bsp_interrupt.o(i.DMA1_Channel3_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[27]">DMA1_Channel4_IRQHandler</a> from bsp_interrupt.o(i.DMA1_Channel4_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[28]">DMA1_Channel5_IRQHandler</a> from bsp_interrupt.o(i.DMA1_Channel5_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[29]">DMA1_Channel6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[65]">DMA1_Channel8_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[51]">DMA2_Channel1_IRQHandler</a> from bsp_dma.o(i.DMA2_Channel1_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[52]">DMA2_Channel2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[53]">DMA2_Channel3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[54]">DMA2_Channel4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[55]">DMA2_Channel5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[66]">DMA2_Channel8_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[67]">DVP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[56]">ETH_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[57]">ETH_WKUP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1f]">EXTI0_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[20]">EXTI1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[21]">EXTI2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[22]">EXTI3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[23]">EXTI4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[30]">EXTI9_5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[60]">I2C3_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5f]">I2C3_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[62]">I2C4_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[61]">I2C4_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[69]">MMU_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1a]">PVD_IRQHandler</a> from bsp_interrupt.o(i.PVD_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5c]">QSPI_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1e]">RCC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6e]">RSRAM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[42]">RTCAlarm_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1c]">RTC_WKUP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[68]">SAC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4a]">SDIO_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4c]">SPI3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6f]">SystemInit</a> from system_n32g45x.o(i.SystemInit) referenced from startup_n32g45x.o(.text)
 <LI><a href="#[1b]">TAMPER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[32]">TIM1_UP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from bsp_interrupt.o(i.TIM2_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[37]">TIM4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4b]">TIM5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4f]">TIM6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[50]">TIM7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[44]">TIM8_BRK_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[47]">TIM8_CC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[46]">TIM8_TRG_COM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[45]">TIM8_UP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6a]">TSC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4d]">UART4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4e]">UART5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[63]">UART6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from bsp_interrupt.o(i.USART3_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[43]">USBWakeUp_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2c]">USB_HP_CAN1_TX_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2d]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[19]">WWDG_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[49]">XFMC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[72]">DmaCallback()</a> from decode.o(i._Z11DmaCallbackv) referenced from draw.o(i._ZN6DecodeC1Ev)
 <LI><a href="#[73]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[71]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[75]">__main</a> from __main.o(!!!main) referenced from startup_n32g45x.o(.text)
 <LI><a href="#[74]">__sti___18_StaticTextList_cpp_60263a08</a> from statictextlist.o(i.__sti___18_StaticTextList_cpp_60263a08) referenced from statictextlist.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[75]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[77]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[79]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[118]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[119]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11a]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[11b]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[11c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[82]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[7c]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[11d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[120]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[121]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[122]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[123]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[124]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[125]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[127]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[130]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[87]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[78]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[139]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[81]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[83]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Bsp_Usart_Init &rArr; Bsp_Usart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[86]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[13c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[88]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>COMP_1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>COMP_4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>RSRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>XFMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_n32g45x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[10b]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[8a]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[8d]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[73]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[13f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[140]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[141]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[90]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7d]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[92]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[8e]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[94]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[89]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[80]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[96]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[8f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[85]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[95]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[9c]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[91]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[97]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[143]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[145]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[147]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[9f]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[b5]"></a>BKP_ReadBkpData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g45x_bkp.o(i.BKP_ReadBkpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBkpData
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[c0]"></a>BKP_WriteBkpData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, n32g45x_bkp.o(i.BKP_WriteBkpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBkpData
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[a0]"></a>BSP_IdleIO_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bsp_idleio.o(i.BSP_IdleIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IdleIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>BspIsIwdogReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_iwdog.o(i.BspIsIwdogReset))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>BspIwdogInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_iwdog.o(i.BspIwdogInit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>BspLedInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dsp_led.o(i.BspLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BspLedInit &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>BspMemDmaInit</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, bsp_dma.o(i.BspMemDmaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BspMemDmaInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigInt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>BspPvdInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bsp_pvd.o(i.BspPvdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BspPvdInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PvdRangeConfig
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PvdEnable
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_InitPeripheral
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>BspRtcGetTimestamp</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_rtc.o(i.BspRtcGetTimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BspRtcGetTimestamp &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Draw()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::RecordRunningTime(DrawMainShowState)
</UL>

<P><STRONG><a name="[b3]"></a>BspRtcInit</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, bsp_rtc.o(i.BspRtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BspRtcInit &rArr; RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBkpData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBkpData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableRtcClk
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableLsi
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigRtcClk
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessEnable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableWriteProtection
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Draw()
</UL>

<P><STRONG><a name="[fe]"></a>BspSetMemDmaIrqCallBack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_dma.o(i.BspSetMemDmaIrqCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePort::SetMemDmaCallback(void(*)())
</UL>

<P><STRONG><a name="[c2]"></a>Bsp_Usart_Config</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, bsp_usart.o(i.Bsp_Usart_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Bsp_Usart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Init
</UL>

<P><STRONG><a name="[c6]"></a>Bsp_Usart_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_usart.o(i.Bsp_Usart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Bsp_Usart_Init &rArr; Bsp_Usart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_interrupt.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; SPI_LCD_DMA_Write_END
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LCD_DMA_Write_END
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_interrupt.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_dma.o(i.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClrIntPendingBit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>DMA_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LCD_DMA_Write_END
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>DMA_ClrIntPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_dma.o(i.DMA_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LCD_DMA_Write_END
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>DMA_ConfigInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_dma.o(i.DMA_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
</UL>

<P><STRONG><a name="[a6]"></a>DMA_DeInit</STRONG> (Thumb, 428 bytes, Stack size 0 bytes, n32g45x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Flash_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
</UL>

<P><STRONG><a name="[c9]"></a>DMA_EnableChannel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_dma.o(i.DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LCD_DMA_Write_END
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Flash_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspMemDmaStart
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>DMA_Flash_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, spi_flash.o(i.DMA_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Flash_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[a7]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g45x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Flash_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
</UL>

<P><STRONG><a name="[cd]"></a>DMA_LCD_Init</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, spi_lcd.o(i.DMA_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_LCD_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigInt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[ac]"></a>EXTI_ClrITPendBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_exti.o(i.EXTI_ClrITPendBit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[ad]"></a>EXTI_InitPeripheral</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, n32g45x_exti.o(i.EXTI_InitPeripheral))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[10f]"></a>FLASH_PrefetchBufSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_flash.o(i.FLASH_PrefetchBufSet))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>FLASH_iCacheCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_flash.o(i.FLASH_iCacheCmd))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>FlashAccessRead</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, flash_access.o(i.FlashAccessRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FlashAccessRead
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Draw()
</UL>

<P><STRONG><a name="[a3]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, n32g45x_gpio.o(i.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Intial
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLCD_LowLevel_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_LowLevel_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspLedInit
</UL>

<P><STRONG><a name="[10e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
</UL>

<P><STRONG><a name="[d8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LCD_DMA_Write_END
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[ce]"></a>LCD_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_driver.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_Init &rArr; LCD_SPI_Init &rArr; DMA_LCD_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P2016_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Intial
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>LCD_P2016_Init</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, lcd_driver.o(i.LCD_P2016_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_P2016_Init &rArr; lcd_write_index_with_data &rArr; LCD_SenndMoreSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d0]"></a>LCD_SPI_Init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, spi_lcd.o(i.LCD_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_SPI_Init &rArr; DMA_LCD_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputEnable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableCalculateCrc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLCD_LowLevel_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[dd]"></a>LCD_SendByte</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, spi_lcd.o(i.LCD_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TransmitData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>

<P><STRONG><a name="[e0]"></a>LCD_SenndMoreSequence</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_lcd.o(i.LCD_SenndMoreSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SenndMoreSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TransmitData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
</UL>

<P><STRONG><a name="[c7]"></a>NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_usart.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Init
</UL>

<P><STRONG><a name="[a9]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_NVIC_Configuration
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
</UL>

<P><STRONG><a name="[1a]"></a>PVD_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bsp_interrupt.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>PWR_BackupAccessEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_pwr.o(i.PWR_BackupAccessEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[af]"></a>PWR_PvdEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_pwr.o(i.PWR_PvdEnable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[ae]"></a>PWR_PvdRangeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_pwr.o(i.PWR_PvdRangeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[ea]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_ConfigPclk1))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[b8]"></a>RCC_ConfigRtcClk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_ConfigRtcClk))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[f0]"></a>RCC_ConfigTim18Clk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_ConfigTim18Clk))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Intial
</UL>

<P><STRONG><a name="[a5]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableAHBPeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Flash_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
</UL>

<P><STRONG><a name="[ab]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableAPB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_LowLevel_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[a1]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableAPB2PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Intial
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLCD_LowLevel_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_LowLevel_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IdleIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspLedInit
</UL>

<P><STRONG><a name="[b6]"></a>RCC_EnableLsi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableLsi))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[b9]"></a>RCC_EnableRtcClk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(i.RCC_EnableRtcClk))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[f9]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, n32g45x_rcc.o(i.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[b7]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, n32g45x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[bd]"></a>RTC_ConfigTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, n32g45x_rtc.o(i.RTC_ConfigTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_ConfigTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[ba]"></a>RTC_EnableWriteProtection</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_EnableWriteProtection))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[bb]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, n32g45x_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[bf]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[b2]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, n32g45x_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcGetTimestamp
</UL>

<P><STRONG><a name="[b1]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, n32g45x_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcGetTimestamp
</UL>

<P><STRONG><a name="[bc]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, n32g45x_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[be]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, n32g45x_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[c1]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, n32g45x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
</UL>

<P><STRONG><a name="[e4]"></a>SPI_ConfigDataLen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_ConfigDataLen))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LCD_DMA_Write_END
</UL>

<P><STRONG><a name="[dc]"></a>SPI_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[db]"></a>SPI_EnableCalculateCrc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_EnableCalculateCrc))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[e3]"></a>SPI_I2S_EnableDma</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_I2S_EnableDma))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LCD_DMA_Write_END
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[de]"></a>SPI_I2S_GetStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_I2S_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LCD_DMA_Write_END
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SenndMoreSequence
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>

<P><STRONG><a name="[df]"></a>SPI_I2S_TransmitData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_I2S_TransmitData))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SenndMoreSequence
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>

<P><STRONG><a name="[d9]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, n32g45x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[c8]"></a>SPI_LCD_DMA_Write_END</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi_lcd.o(i.SPI_LCD_DMA_Write_END))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_LCD_DMA_Write_END
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClrIntPendingBit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableDma
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>SPI_SSOutputEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_spi.o(i.SPI_SSOutputEnable))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[117]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>

<P><STRONG><a name="[6f]"></a>SystemInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, system_n32g45x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_interrupt.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Tick(unsigned)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>TIM_ConfigInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[ec]"></a>TIM_ConfigPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_ConfigPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>

<P><STRONG><a name="[e9]"></a>TIM_Configuration</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bsp_time.o(i.TIM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPrescaler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1msInit
</UL>

<P><STRONG><a name="[ee]"></a>TIM_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Intial
</UL>

<P><STRONG><a name="[f2]"></a>TIM_EnableCtrlPwmOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_EnableCtrlPwmOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Intial
</UL>

<P><STRONG><a name="[e6]"></a>TIM_GetIntStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, n32g45x_tim.o(i.TIM_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>TIM_InitOc1</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, n32g45x_tim.o(i.TIM_InitOc1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_InitOc1
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Intial
</UL>

<P><STRONG><a name="[eb]"></a>TIM_InitTimeBase</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_InitTimeBase))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWM_Intial
</UL>

<P><STRONG><a name="[ef]"></a>TIM_NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_time.o(i.TIM_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1msInit
</UL>

<P><STRONG><a name="[cf]"></a>TIM_PWM_Intial</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, bsp_pwm.o(i.TIM_PWM_Intial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM_PWM_Intial &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigTim18Clk
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc1
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableCtrlPwmOutputs
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[115]"></a>TIM_SetCmp1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(i.TIM_SetCmp1))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>Time1msInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_time.o(i.Time1msInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Time1msInit &rArr; TIM_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_NVIC_Configuration
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, bsp_interrupt.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; Draw::Refresh(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Refresh(unsigned char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>USART_ClrFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, n32g45x_usart.o(i.USART_ClrFlag))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>USART_ClrIntPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, n32g45x_usart.o(i.USART_ClrIntPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClrIntPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>USART_ConfigInt</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, n32g45x_usart.o(i.USART_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
</UL>

<P><STRONG><a name="[c5]"></a>USART_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
</UL>

<P><STRONG><a name="[f4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, n32g45x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>USART_Init</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, n32g45x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
</UL>

<P><STRONG><a name="[f7]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>DmaCallback()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, decode.o(i._Z11DmaCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DmaCallback() &rArr; SetNextCopyStep(DecodePictureNode&) &rArr; DecodePort::StartMemDma(unsigned, unsigned, unsigned) &rArr; bspMemDmaStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextCopyStep(DecodePictureNode&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> draw.o(i._ZN6DecodeC1Ev)
</UL>
<P><STRONG><a name="[fa]"></a>SetNextCopyStep(DecodePictureNode&)</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, decode.o(i._Z15SetNextCopyStepR17DecodePictureNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetNextCopyStep(DecodePictureNode&) &rArr; DecodePort::StartMemDma(unsigned, unsigned, unsigned) &rArr; bspMemDmaStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePort::StartMemDma(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmaCallback()
</UL>

<P><STRONG><a name="[fb]"></a>DecodePort::StartMemDma(unsigned, unsigned, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, decode_port.o(i._ZN10DecodePort11StartMemDmaEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DecodePort::StartMemDma(unsigned, unsigned, unsigned) &rArr; bspMemDmaStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspMemDmaStart
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNextCopyStep(DecodePictureNode&)
</UL>

<P><STRONG><a name="[fd]"></a>DecodePort::SetMemDmaCallback(void(*)())</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, decode_port.o(i._ZN10DecodePort17SetMemDmaCallbackEPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DecodePort::SetMemDmaCallback(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspSetMemDmaIrqCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode::Decode()
</UL>

<P><STRONG><a name="[109]"></a>IDecodeText::IDecodeText__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, decode.o(i._ZN11IDecodeTextC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode::CreatText()
</UL>

<P><STRONG><a name="[ff]"></a>Draw::ReloadPage()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, draw.o(i._ZN4Draw10ReloadPageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Draw::ReloadPage() &rArr; Draw::SetNextPage(DrawMainShowState) &rArr; Draw::RecordRunningTime(DrawMainShowState) &rArr; BspRtcGetTimestamp &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::SetNextPage(DrawMainShowState)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>Draw::SetNextPage(DrawMainShowState)</STRONG> (Thumb, 512 bytes, Stack size 16 bytes, draw.o(i._ZN4Draw11SetNextPageE17DrawMainShowState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Draw::SetNextPage(DrawMainShowState) &rArr; Draw::RecordRunningTime(DrawMainShowState) &rArr; BspRtcGetTimestamp &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode::SleepAll()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::RecordRunningTime(DrawMainShowState)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::SetPlayingDelay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::ReloadPage()
</UL>

<P><STRONG><a name="[103]"></a>Draw::SetPlayingDelay(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, draw.o(i._ZN4Draw15SetPlayingDelayEj))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::SetNextPage(DrawMainShowState)
</UL>

<P><STRONG><a name="[101]"></a>Draw::RecordRunningTime(DrawMainShowState)</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, draw.o(i._ZN4Draw17RecordRunningTimeE17DrawMainShowState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Draw::RecordRunningTime(DrawMainShowState) &rArr; BspRtcGetTimestamp &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcGetTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::SetNextPage(DrawMainShowState)
</UL>

<P><STRONG><a name="[114]"></a>Draw::Init()</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, draw.o(i._ZN4Draw4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>Draw::Tick(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, draw.o(i._ZN4Draw4TickEj))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>Draw::Refresh(unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, draw.o(i._ZN4Draw7RefreshEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Draw::Refresh(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>Draw::Draw()</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, draw.o(i._ZN4DrawC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Draw::Draw() &rArr; Decode::CreatText() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAccessRead
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspRtcGetTimestamp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode::CreatText()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode::Decode()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>Draw::Draw__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, draw.o(i._ZN4DrawC1Ev), UNUSED)

<P><STRONG><a name="[102]"></a>Decode::SleepAll()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, decode.o(i._ZN6Decode8SleepAllEv))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::SetNextPage(DrawMainShowState)
</UL>

<P><STRONG><a name="[106]"></a>Decode::CreatText()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, decode.o(i._ZN6Decode9CreatTextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Decode::CreatText() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDecodeText::IDecodeText__sub_object()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Draw()
</UL>

<P><STRONG><a name="[105]"></a>Decode::Decode()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, draw.o(i._ZN6DecodeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Decode::Decode() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePort::SetMemDmaCallback(void(*)())
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Draw()
</UL>

<P><STRONG><a name="[149]"></a>Decode::Decode__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, draw.o(i._ZN6DecodeC1Ev), UNUSED)

<P><STRONG><a name="[10a]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode::Decode()
</UL>

<P><STRONG><a name="[108]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode::CreatText()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode::Decode()
</UL>

<P><STRONG><a name="[fc]"></a>bspMemDmaStart</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_dma.o(i.bspMemDmaStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bspMemDmaStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodePort::StartMemDma(unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[10c]"></a>lcd_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd_driver.o(i.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_clear &rArr; lcd_write_data_16bit &rArr; lcd_write_data &rArr; LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>lcd_write_data</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_write_data &rArr; LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data_16bit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P2016_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>lcd_write_data_16bit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcd_driver.o(i.lcd_write_data_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_write_data_16bit &rArr; lcd_write_data &rArr; LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[d4]"></a>lcd_write_index</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_write_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_write_index &rArr; LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P2016_Init
</UL>

<P><STRONG><a name="[d6]"></a>lcd_write_index_with_data</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd_driver.o(i.lcd_write_index_with_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_write_index_with_data &rArr; LCD_SenndMoreSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SenndMoreSequence
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P2016_Init
</UL>

<P><STRONG><a name="[84]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = main &rArr; Bsp_Usart_Init &rArr; Bsp_Usart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_iCacheCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufSet
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time1msInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCmp1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Draw()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::Init()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw::ReloadPage()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspIwdogInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspIsIwdogReset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IdleIO_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspLedInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[111]"></a>sFLASH_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, spi_flash.o(i.sFLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sFLASH_Init &rArr; sFLASH_LowLevel_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableDma
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_LowLevel_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>sFLASH_LowLevel_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, spi_flash.o(i.sFLASH_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sFLASH_LowLevel_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_Init
</UL>

<P><STRONG><a name="[d7]"></a>sLCD_LowLevel_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, spi_lcd.o(i.sLCD_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sLCD_LowLevel_Init &rArr; GPIO_InitPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2PeriphClk
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Init
</UL>

<P><STRONG><a name="[d3]"></a>systick_delay_ms</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, delay.o(i.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = systick_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_P2016_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
</UL>

<P><STRONG><a name="[7b]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[14a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[14b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e5]"></a>SetSysClock</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, system_n32g45x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e1]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
</UL>

<P><STRONG><a name="[e2]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, n32g45x_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConfigTime
</UL>

<P><STRONG><a name="[d1]"></a>lcd_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_reset &rArr; systick_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[74]"></a>__sti___18_StaticTextList_cpp_60263a08</STRONG> (Thumb, 2838 bytes, Stack size 0 bytes, statictextlist.o(i.__sti___18_StaticTextList_cpp_60263a08))
<BR>[Address Reference Count : 1]<UL><LI> statictextlist.o(.init_array)
</UL>
<P><STRONG><a name="[71]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
