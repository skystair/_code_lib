<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\D_LCD.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\D_LCD.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Thu Sep 21 15:57:01 2023
<BR><P>
<H3>Maximum Stack Usage =        108 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; bspinit &rArr; dmaXinit &rArr; BspMemDmaInit &rArr; DMA_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[39]">ADC3_4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5e]">COMP7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5c]">COMP_1_2_3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5d]">COMP_4_5_6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from bsp_dma.o(.text.DMA1_Channel2_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from bsp_dma.o(.text.DMA1_Channel3_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from bsp_dma.o(.text.DMA1_Channel4_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from bsp_dma.o(.text.DMA1_Channel5_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[56]">DMA1_Channel8_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from bsp_dma.o(.text.DMA2_Channel1_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[46]">DMA2_Channel5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[57]">DMA2_Channel8_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[58]">DVP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[68]">GPIO_InitPeripheral</a> from n32g45x_gpio.o(.text.GPIO_InitPeripheral) referenced from bsp_gpio.o(.text.gpioinit)
 <LI><a href="#[69]">GPIO_SetBits</a> from n32g45x_gpio.o(.text.GPIO_SetBits) referenced from lcd_driver.o(.text.lcd_write_index_with_data)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[51]">I2C3_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[50]">I2C3_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[53]">I2C4_ER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[52]">I2C4_EV_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5a]">MMU_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from bsp_pvd.o(.text.PVD_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[4d]">QSPI_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[63]">RCC_EnableAPB1PeriphClk</a> from n32g45x_rcc.o(.text.RCC_EnableAPB1PeriphClk) referenced from config.o(.text.CLKinit)
 <LI><a href="#[62]">RCC_EnableAPB2PeriphClk</a> from n32g45x_rcc.o(.text.RCC_EnableAPB2PeriphClk) referenced from config.o(.text.CLKinit)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5f]">RSRAM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[59]">SAC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[60]">SystemInit</a> from system_n32g45x.o(.text.SystemInit) referenced from startup_n32g45x.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from bsp_time.o(.text.TIM2_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5b]">TSC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[54]">UART6_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[55]">UART7_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_interrupt.o(.text.USART3_IRQHandler) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[67]">USART_GetFlagStatus</a> from n32g45x_usart.o(.text.USART_GetFlagStatus) referenced from bsp_interrupt.o(.text.USART3_IRQHandler)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[3a]">XFMC_IRQHandler</a> from startup_n32g45x.o(.text) referenced from startup_n32g45x.o(RESET)
 <LI><a href="#[61]">__main</a> from __main.o(!!!main) referenced from startup_n32g45x.o(.text)
 <LI><a href="#[65]">lcd_write_data</a> from lcd_driver.o(.text.lcd_write_data) referenced from lcdfunc.o(.text.LCDinit)
 <LI><a href="#[65]">lcd_write_data</a> from lcd_driver.o(.text.lcd_write_data) referenced from lcdfunc.o(.text.lcd_set_zahyo)
 <LI><a href="#[64]">lcd_write_index</a> from lcd_driver.o(.text.lcd_write_index) referenced from lcdfunc.o(.text.LCDinit)
 <LI><a href="#[66]">lcd_write_index_with_data</a> from lcd_driver.o(.text.lcd_write_index_with_data) referenced from lcdfunc.o(.text.LCDinit)
 <LI><a href="#[6a]">sFLASH_SendByte</a> from spi_flash.o(.text.sFLASH_SendByte) referenced from spi_flash.o(.text.sFLASH_ReadID)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[61]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[cf]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[73]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[da]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[db]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[de]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[df]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[e7]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[e8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[e9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ea]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[eb]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[ec]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ed]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[6c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ee]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[70]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[72]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ef]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[74]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; bspinit &rArr; dmaXinit &rArr; BspMemDmaInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[77]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[f1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[79]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>COMP_1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>COMP_4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DVP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>MMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>RSRAM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>XFMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_n32g45x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_n32g45x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDvalueinit
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[76]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[fa]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>BspIsIwdogReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_iwdog.o(.text.BspIsIwdogReset))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>BspIwdogInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_iwdog.o(.text.BspIwdogInit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>BspMemDmaInit</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, bsp_dma.o(.text.BspMemDmaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BspMemDmaInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaXinit
</UL>

<P><STRONG><a name="[83]"></a>BspPvdInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, bsp_pvd.o(.text.BspPvdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BspPvdInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1PeriphClk
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PvdRangeConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PvdEnable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClrITPendBit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspinit
</UL>

<P><STRONG><a name="[88]"></a>Bsp_Usart_Config</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_usart.o(.text.Bsp_Usart_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bsp_Usart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ConfigInt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Init
</UL>

<P><STRONG><a name="[8c]"></a>Bsp_Usart_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_usart.o(.text.Bsp_Usart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bsp_Usart_Init &rArr; Bsp_Usart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspinit
</UL>

<P><STRONG><a name="[8e]"></a>CLKinit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, config.o(.text.CLKinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLKinit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigTim18Clk
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHBPeriphClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspinit
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_dma.o(.text.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bsp_dma.o(.text.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; DMA_EnableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClrIntPendingBit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableDma
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_dma.o(.text.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_dma.o(.text.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_dma.o(.text.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Channel1_IRQHandler &rArr; DMA_EnableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClrIntPendingBit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DMA_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_dma.o(.text.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>DMA_ClrIntPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_dma.o(.text.DMA_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>DMA_ConfigInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_dma.o(.text.DMA_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[7f]"></a>DMA_DeInit</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, n32g45x_dma.o(.text.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
</UL>

<P><STRONG><a name="[93]"></a>DMA_EnableChannel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, n32g45x_dma.o(.text.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>DMA_Init</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, n32g45x_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
</UL>

<P><STRONG><a name="[96]"></a>DMA_LCD_Init</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, bsp_dma.o(.text.DMA_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DMA_LCD_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaXinit
</UL>

<P><STRONG><a name="[84]"></a>EXTI_ClrITPendBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_exti.o(.text.EXTI_ClrITPendBit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[85]"></a>EXTI_InitPeripheral</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, n32g45x_exti.o(.text.EXTI_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_InitPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[be]"></a>FlashAccessValueinit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash_access.o(.text.FlashAccessValueinit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>FlashAccessfunc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, flash_access.o(.text.FlashAccessfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashAccessfunc &rArr; sFLASH_ReadBuffer &rArr; OUTLINED_FUNCTION_2 &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadByte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>GPIO_InitPeripheral</STRONG> (Thumb, 196 bytes, Stack size 36 bytes, n32g45x_gpio.o(.text.GPIO_InitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_InitPeripheral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_gpio.o(.text.gpioinit)
</UL>
<P><STRONG><a name="[a5]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[69]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioinit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.text.lcd_write_index_with_data)
</UL>
<P><STRONG><a name="[9b]"></a>LCD_SendByte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_lcd.o(.text.LCD_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TransmitData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
</UL>

<P><STRONG><a name="[9f]"></a>LCD_SenndMoreSequence</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, spi_lcd.o(.text.LCD_SenndMoreSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SenndMoreSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TransmitData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
</UL>

<P><STRONG><a name="[b8]"></a>LCD_fresh</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcdfunc.o(.text.LCD_fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_fresh
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
</UL>

<P><STRONG><a name="[ba]"></a>LCDinit</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lcdfunc.o(.text.LCDinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCDinit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
</UL>

<P><STRONG><a name="[c1]"></a>LCDreset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcdfunc.o(.text.LCDreset))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>LCDvalueinit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcdfunc.o(.text.LCDvalueinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LCDvalueinit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>NVIC_Configuration</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bsp_usart.o(.text.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Init
</UL>

<P><STRONG><a name="[82]"></a>NVIC_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2base
</UL>

<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_pvd.o(.text.PVD_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>PWR_PvdEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_pwr.o(.text.PWR_PvdEnable))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[86]"></a>PWR_PvdRangeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_pwr.o(.text.PWR_PvdRangeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>

<P><STRONG><a name="[91]"></a>RCC_ConfigPclk1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text.RCC_ConfigPclk1))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKinit
</UL>

<P><STRONG><a name="[90]"></a>RCC_ConfigTim18Clk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text.RCC_ConfigTim18Clk))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKinit
</UL>

<P><STRONG><a name="[8f]"></a>RCC_EnableAHBPeriphClk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text.RCC_EnableAHBPeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKinit
</UL>

<P><STRONG><a name="[63]"></a>RCC_EnableAPB1PeriphClk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text.RCC_EnableAPB1PeriphClk))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.text.CLKinit)
</UL>
<P><STRONG><a name="[62]"></a>RCC_EnableAPB2PeriphClk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text.RCC_EnableAPB2PeriphClk))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.text.CLKinit)
</UL>
<P><STRONG><a name="[b1]"></a>RCC_GetClocksFreqValue</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, n32g45x_rcc.o(.text.RCC_GetClocksFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c6]"></a>SPI_ConfigDataLen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_spi.o(.text.SPI_ConfigDataLen))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixinit
</UL>

<P><STRONG><a name="[c5]"></a>SPI_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_spi.o(.text.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixinit
</UL>

<P><STRONG><a name="[c4]"></a>SPI_EnableCalculateCrc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_spi.o(.text.SPI_EnableCalculateCrc))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixinit
</UL>

<P><STRONG><a name="[94]"></a>SPI_I2S_EnableDma</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_spi.o(.text.SPI_I2S_EnableDma))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixinit
</UL>

<P><STRONG><a name="[a3]"></a>SPI_I2S_GetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_spi.o(.text.SPI_I2S_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[c2]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_spi.o(.text.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[9d]"></a>SPI_I2S_TransmitData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_spi.o(.text.SPI_I2S_TransmitData))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SenndMoreSequence
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>

<P><STRONG><a name="[c3]"></a>SPI_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, n32g45x_spi.o(.text.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixinit
</UL>

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 248 bytes, Stack size 28 bytes, system_n32g45x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_time.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>TIM_ClrIntPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text.TIM_ClrIntPendingBit))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>TIM_ConfigInt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text.TIM_ConfigInt))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2base
</UL>

<P><STRONG><a name="[cd]"></a>TIM_ConfigPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_tim.o(.text.TIM_ConfigPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2base
</UL>

<P><STRONG><a name="[ca]"></a>TIM_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, n32g45x_tim.o(.text.TIM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2base
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1PWMinit
</UL>

<P><STRONG><a name="[cb]"></a>TIM_EnableCtrlPwmOutputs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, n32g45x_tim.o(.text.TIM_EnableCtrlPwmOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1PWMinit
</UL>

<P><STRONG><a name="[ab]"></a>TIM_GetIntStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_tim.o(.text.TIM_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>TIM_InitOc1</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, n32g45x_tim.o(.text.TIM_InitOc1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_InitOc1
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1PWMinit
</UL>

<P><STRONG><a name="[c8]"></a>TIM_InitTimeBase</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, n32g45x_tim.o(.text.TIM_InitTimeBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2base
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1PWMinit
</UL>

<P><STRONG><a name="[b9]"></a>TIM_SetCmp1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, n32g45x_tim.o(.text.TIM_SetCmp1))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
</UL>

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, bsp_interrupt.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrIntPendingBit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClrFlag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_n32g45x.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>USART_ClrFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_usart.o(.text.USART_ClrFlag))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>USART_ClrIntPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, n32g45x_usart.o(.text.USART_ClrIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>USART_ConfigInt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, n32g45x_usart.o(.text.USART_ConfigInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
</UL>

<P><STRONG><a name="[8b]"></a>USART_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, n32g45x_usart.o(.text.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
</UL>

<P><STRONG><a name="[67]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_usart.o(.text.USART_GetFlagStatus))
<BR>[Address Reference Count : 1]<UL><LI> bsp_interrupt.o(.text.USART3_IRQHandler)
</UL>
<P><STRONG><a name="[89]"></a>USART_Init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, n32g45x_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreqValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Config
</UL>

<P><STRONG><a name="[b0]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, n32g45x_usart.o(.text.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>bspinit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, config.o(.text.bspinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bspinit &rArr; dmaXinit &rArr; BspMemDmaInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKinit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioinit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspPvdInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaXinit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixinit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerXinit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>dmaXinit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_dma.o(.text.dmaXinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dmaXinit &rArr; BspMemDmaInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspinit
</UL>

<P><STRONG><a name="[b7]"></a>funcLCD</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, lcdfunc.o(.text.funcLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = funcLCD &rArr; lcd_set_zahyo &rArr; lcd_write_index &rArr; LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableDma
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_zahyo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDinit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_fresh
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCmp1
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>gpioinit</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bsp_gpio.o(.text.gpioinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpioinit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspinit
</UL>

<P><STRONG><a name="[bb]"></a>lcd_set_zahyo</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcdfunc.o(.text.lcd_set_zahyo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_set_zahyo &rArr; lcd_write_index &rArr; LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
</UL>

<P><STRONG><a name="[65]"></a>lcd_write_data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd_driver.o(.text.lcd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_write_data &rArr; LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lcdfunc.o(.text.LCDinit)
<LI> lcdfunc.o(.text.lcd_set_zahyo)
</UL>
<P><STRONG><a name="[64]"></a>lcd_write_index</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd_driver.o(.text.lcd_write_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_write_index &rArr; LCD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_zahyo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdfunc.o(.text.LCDinit)
</UL>
<P><STRONG><a name="[66]"></a>lcd_write_index_with_data</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcd_driver.o(.text.lcd_write_index_with_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_write_index_with_data &rArr; LCD_SenndMoreSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SenndMoreSequence
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdfunc.o(.text.LCDinit)
</UL>
<P><STRONG><a name="[75]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = main &rArr; bspinit &rArr; dmaXinit &rArr; BspMemDmaInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspinit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDreset
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcLCD
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDvalueinit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAccessfunc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAccessValueinit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspIsIwdogReset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspIwdogInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9a]"></a>sFLASH_ReadBuffer</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, spi_flash.o(.text.sFLASH_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sFLASH_ReadBuffer &rArr; OUTLINED_FUNCTION_2 &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAccessfunc
</UL>

<P><STRONG><a name="[99]"></a>sFLASH_ReadByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_flash.o(.text.sFLASH_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sFLASH_ReadByte &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAccessfunc
</UL>

<P><STRONG><a name="[98]"></a>sFLASH_ReadID</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, spi_flash.o(.text.sFLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sFLASH_ReadID
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAccessfunc
</UL>

<P><STRONG><a name="[6a]"></a>sFLASH_SendByte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_flash.o(.text.sFLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash.o(.text.sFLASH_ReadID)
</UL>
<P><STRONG><a name="[b4]"></a>spixinit</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, bsp_spix.o(.text.spixinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spixinit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableCalculateCrc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ConfigDataLen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_EnableDma
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspinit
</UL>

<P><STRONG><a name="[c7]"></a>tim1PWMinit</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, bsp_time.o(.text.tim1PWMinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tim1PWMinit &rArr; TIM_InitOc1
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableCtrlPwmOutputs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitOc1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerXinit
</UL>

<P><STRONG><a name="[cc]"></a>tim2base</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsp_time.o(.text.tim2base))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tim2base &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigPrescaler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ConfigInt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Enable
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerXinit
</UL>

<P><STRONG><a name="[b6]"></a>timerXinit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_time.o(.text.timerXinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timerXinit &rArr; tim1PWMinit &rArr; TIM_InitOc1
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim2base
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim1PWMinit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspinit
</UL>

<P><STRONG><a name="[6f]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[fd]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[fe]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[aa]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, n32g45x_rcc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigTim18Clk
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ConfigPclk1
</UL>

<P><STRONG><a name="[ad]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, n32g45x_tim.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClrIntPendingBit
</UL>

<P><STRONG><a name="[81]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dma.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ConfigInt
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BspMemDmaInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LCD_Init
</UL>

<P><STRONG><a name="[a9]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_pvd.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_gpio.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioinit
</UL>

<P><STRONG><a name="[bd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_gpio.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioinit
</UL>

<P><STRONG><a name="[9c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_lcd.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SenndMoreSequence
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>

<P><STRONG><a name="[9e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_lcd.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SenndMoreSequence
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByte
</UL>

<P><STRONG><a name="[a7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_flash.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
</UL>

<P><STRONG><a name="[a8]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_flash.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
</UL>

<P><STRONG><a name="[a4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_flash.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
</UL>

<P><STRONG><a name="[a6]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_driver.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index_with_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
